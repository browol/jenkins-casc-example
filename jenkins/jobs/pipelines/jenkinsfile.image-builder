pipeline {
    agent {
        label('built-in')
    }
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Check') {
            steps {
                script {
                    def version = sh(script: "buildctl --version", returnStdout: true)
                    echo "Buildctl version: ${version}"
                    echo "Buildkitd address: ${env.BUILDKIT_ADDR}"
                    echo "Destination container registry: ${env.REGISTRY_URL}/${env.IMAGE_NAME}"

                    if (env.IMAGE_TAG.isEmpty()) {
                        echo "Image tag isn't specified, fallback to bumping patch."
                        env.IMAGE_TAG       = getTag()
                        env.BUMP_VERSION    = "true"
                    }
                    echo "Image tag: ${env.IMAGE_TAG}"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    env.OCI_OUTPUT_PATH = "${WORKSPACE}/oci-output.tar"
                    env.OCI_DIR         = "${WORKSPACE}/oci-bundle/"

                    sh([
                        "buildctl",
                        "--addr ${env.BUILDKIT_ADDR}",
                        "build --frontend dockerfile.v0",
                        "--local context=nginx/nginx-unprivileged/app/",
                        "--local dockerfile=nginx/nginx-unprivileged/",
                        "--output type=oci,dest='${env.OCI_OUTPUT_PATH}'",
                        "--export-cache type=registry,ref=${env.REGISTRY_URL}/${env.IMAGE_NAME}:${env.IMAGE_TAG}-cache",
                        "--import-cache type=registry,ref=${env.REGISTRY_URL}/${env.IMAGE_NAME}:${env.IMAGE_TAG}-cache"
                    ].join(" "))

                    sh("mkdir -p '${env.OCI_DIR}'")
                    sh("tar -xf '${env.OCI_OUTPUT_PATH}' -C '${env.OCI_DIR}'")
                }
            }
        }
        stage('Docker Image Scan') {
            steps {
                script {
                    sh("trivy image --exit-code 0 --severity HIGH,CRITICAL --input '${env.OCI_DIR}'")
                }
            }
        }
        stage('Push') {
            steps {
                script {
                    sh([
                        "buildctl",
                        "--addr ${env.BUILDKIT_ADDR}",
                        "build --frontend dockerfile.v0",
                        "--local context=nginx/nginx-unprivileged/app/",
                        "--local dockerfile=nginx/nginx-unprivileged/",
                        "--output type=image,name=${env.REGISTRY_URL}/${env.IMAGE_NAME}:${env.IMAGE_TAG},push=true",
                        "--export-cache type=registry,ref=${env.REGISTRY_URL}/${env.IMAGE_NAME}:${env.IMAGE_TAG}-cache",
                        "--import-cache type=registry,ref=${env.REGISTRY_URL}/${env.IMAGE_NAME}:${env.IMAGE_TAG}-cache"
                    ].join(" "))

                    if (env.BUMP_VERSION == "true") {
                        def currentCommit = sh(script: "git rev-parse --short HEAD", returnStdout: true)
                        sh("git tag -f ${env.IMAGE_TAG} ${currentCommit}")

                        withCredentials([usernamePassword(credentialsId: "git-token-credentials", passwordVariable: "PASSWORD", usernameVariable: "USERNAME")]) {
                            def remoteURL = env.CONFIGURATION_REPOSITORY_URL.replace("https://", "")
                            sh("git push https://browol:${PASSWORD}@${remoteURL} --tags -f")
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
        }
    }
}

def getTag() {
    def commitID   = sh(script: "git rev-list --tags --max-count=1", returnStdout: true)
    def currentTag = sh(script: "git describe --tags ${commitID}", returnStdout: true)
    return bumpVersion(currentTag, env.VERSION_BUMP ?: "patch")
}

def bumpVersion(String version, String part) {
    // Split the version string into its parts
    def (major, minor, patch) = version.split('\\.')

    // Determine which part to bump
    if (part == 'major') {
        major = (major.toInteger() + 1).toString()
        minor = '0'
        patch = '0'
    } else if (part == 'minor') {
        minor = (minor.toInteger() + 1).toString()
        patch = '0'
    } else if (part == 'patch') {
        patch = (patch.toInteger() + 1).toString()
    } else {
        error("Invalid part. Must be 'major', 'minor', or 'patch'.")
    }

    // Return the bumped version
    return "${major}.${minor}.${patch}"
}
